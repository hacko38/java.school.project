/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import model.TableStockModel;

/**
 *
 * @author Hakim
 */
public class RESP_ATELIER extends javax.swing.JFrame {

    /**
     * Creates new form RESP_ATELIER
     */
    public RESP_ATELIER() {
        initComponents();
        this.setLocation(200, 200);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabCtrlStock = new javax.swing.JTable();
        labAtelier = new javax.swing.JLabel();
        butLancer = new javax.swing.JButton();
        labError = new javax.swing.JLabel();
        butDemandesCours = new javax.swing.JButton();
        butDemSelect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabCtrlStock.setModel(new TableStockModel()
        );
        tabCtrlStock.getTableHeader().setResizingAllowed(false);
        tabCtrlStock.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabCtrlStock);

        labAtelier.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        labAtelier.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labAtelier.setText("Service Atelier");

        butLancer.setText("LANCER UN LOT");
        butLancer.setToolTipText("Lancer une demande d'approvisionnement");
        butLancer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butLancerActionPerformed(evt);
            }
        });

        labError.setForeground(new java.awt.Color(255, 51, 51));
        labError.setText("  ");

        butDemandesCours.setText("TOUTES LES DEMANDES");
        butDemandesCours.setToolTipText("Afficher toutes les demandes en cours");
        butDemandesCours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDemandesCoursActionPerformed(evt);
            }
        });

        butDemSelect.setText("DEMANDES DU MODELE");
        butDemSelect.setToolTipText("Afficher les demandes concernant le modèle selectionné");
        butDemSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDemSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labAtelier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(butDemandesCours, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(butLancer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(butDemSelect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(labAtelier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labError)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(butLancer, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(butDemandesCours, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(butDemSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butLancerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLancerActionPerformed
        //On set le label error à "" 
        this.labError.setText(" ");
        //Si aucune ligne n'est selectionnée
        if (this.tabCtrlStock.getSelectedRow() != -1) {
            //On recupère le modele de la tabCtrlStock casté.
            TableStockModel model = (TableStockModel) tabCtrlStock.getModel();

            //On ouvre la frame approvisionnement
            //Pour lui faire passer l'objet Stock en paramètre, on utilise la methode getElementAt du modele qui nous renvoie un Stock.
            //getElementAt prend en paramètre un index. Ici, l'index est la getSelectedRow
            SupplierFrame sf = null;
            try {
                sf = new SupplierFrame(model.getElementAt(tabCtrlStock.getSelectedRow()));

                //On abonne l'écouteur de cette frame a la fermeture de la frame supplier
                sf.abonner(new EcouteurWindows());
                sf.setVisible(true);
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        } else {
            //Sinon on set le label erreur
            this.labError.setText("Veuillez selectionner une ligne");
        }
    }//GEN-LAST:event_butLancerActionPerformed

    private void butDemandesCoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDemandesCoursActionPerformed
        //On met le label Error à vide au cas ou on l'avait affiché auparavant
        this.labError.setText(" ");
        //Afficher toutes les demandes en cours (constructeur sans parametre)
        LaunchedBatchFrame lbf = new LaunchedBatchFrame();
        lbf.setVisible(true);
    }//GEN-LAST:event_butDemandesCoursActionPerformed

    private void butDemSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDemSelectActionPerformed
        //Afficher les demandes du modele selectionné (constructeur avec parametres)
        //On set le label error à "" 
        this.labError.setText(" ");
        //Si aucune ligne n'est selectionnée
        if (this.tabCtrlStock.getSelectedRow() != -1) {
            //On recupère le modele de la tabCtrlStock casté.
            TableStockModel model = (TableStockModel) tabCtrlStock.getModel();

            //On ouvre la frame demandes en cours avec paramètres
            //Pour lui faire passer l'objet Stock en paramètre, on utilise la methode getElementAt du modele qui nous renvoie un Stock.
            //getElementAt prend en paramètre un index. Ici, l'index est la getSelectedRow
            LaunchedBatchFrame lbf = null;
            try {
                lbf = new LaunchedBatchFrame(model.getElementAt(tabCtrlStock.getSelectedRow()));
                lbf.setVisible(true);
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        } else {
            //Sinon on set le label erreur
            this.labError.setText("Veuillez selectionner une ligne");
        }

    }//GEN-LAST:event_butDemSelectActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butDemSelect;
    private javax.swing.JButton butDemandesCours;
    private javax.swing.JButton butLancer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labAtelier;
    private javax.swing.JLabel labError;
    private javax.swing.JTable tabCtrlStock;
    // End of variables declaration//GEN-END:variables

    //Ecouteur de fenetre qui rafraichit la jtable
    class EcouteurWindows extends WindowAdapter {

        @Override
        public void windowClosed(WindowEvent e) {
            TableStockModel model = (TableStockModel) tabCtrlStock.getModel();
            model.refreshmodel();
        }

    }

}
