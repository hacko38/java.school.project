/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import entities.Presse;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JList;
import javax.swing.JOptionPane;
import managerBDD.ManagerPresse;
import model.ListPresseModel;
import tools.Tools;

/**
 *
 * @author quent
 */
public class PanelMachine extends javax.swing.JPanel {

    /**
     * Creates new form PanelMachine
     */
    public PanelMachine() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labMachine = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listPresse = new javax.swing.JList();
        butAjouter = new javax.swing.JButton();
        butSupprimer = new javax.swing.JButton();
        butRehabiliter = new javax.swing.JButton();
        butActualiser = new javax.swing.JButton();

        labMachine.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        labMachine.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labMachine.setText("Gestionnaire de Machines");

        listPresse.setModel(new ListPresseModel());
        jScrollPane1.setViewportView(listPresse);

        butAjouter.setText("AJOUTER PRESSE");
        butAjouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAjouterActionPerformed(evt);
            }
        });

        butSupprimer.setText("SUPPRIMER PRESSE");
        butSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSupprimerActionPerformed(evt);
            }
        });

        butRehabiliter.setText("REHABILITER PRESSE");
        butRehabiliter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRehabiliterActionPerformed(evt);
            }
        });

        butActualiser.setText("ACTUALISER");
        butActualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butActualiserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labMachine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(butAjouter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(butSupprimer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(butRehabiliter, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(butActualiser)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labMachine, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(butAjouter, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(butSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(butRehabiliter, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(butActualiser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(72, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public static JList getListPresse() {
        return listPresse;
    }


    private void butAjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAjouterActionPerformed

        PUajoutPresse popup = new PUajoutPresse();
        popup.setVisible(true);
    }//GEN-LAST:event_butAjouterActionPerformed

    private void butActualiserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butActualiserActionPerformed
        ListPresseModel model = (ListPresseModel) listPresse.getModel();
        model.refreshmodel();
    }//GEN-LAST:event_butActualiserActionPerformed

    private void butSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSupprimerActionPerformed

        if (listPresse.getSelectedIndices().length != 0) {
            Presse p = (Presse) PanelMachine.listPresse.getSelectedValue();
            int numPresse = p.getNumPresse();
            boolean supprimee = p.isSupprimee();
            boolean etatPresse = p.isEtatPresse();
            if (listPresse.getSelectedIndices().length > 1) {
                JOptionPane.showMessageDialog(this, "Veuillez ne selectionner qu'une seule presse à supprimer");
            } else if (etatPresse == true) {
                JOptionPane.showMessageDialog(this, "La presse " + numPresse + " est en train de produire, Impossible de la supprimer");
            }else if (supprimee == true) {
                JOptionPane.showMessageDialog(this, "La presse " + numPresse + " est déjà supprimée.");
            } else if (listPresse.getSelectedIndices().length == 1) {

                PUsupprimer puSupp = new PUsupprimer();
                puSupp.setVisible(true);
                puSupp.abonner(new EcouteurWindows());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez selectionner une presse ");
        }
    }//GEN-LAST:event_butSupprimerActionPerformed

    private void butRehabiliterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRehabiliterActionPerformed

        if (listPresse.getSelectedIndices().length != 0) {
            Presse p = (Presse) PanelMachine.listPresse.getSelectedValue();
            int numPresse = p.getNumPresse();
            boolean supprimee = p.isSupprimee();
            if (listPresse.getSelectedIndices().length > 1) {
                JOptionPane.showMessageDialog(this, "Veuillez ne selectionner qu'une seule presse à réhabiliter");
            } else if (supprimee == false) {
                JOptionPane.showMessageDialog(this, "La presse " + numPresse + " est déjà disponible à la production.");
            } else if (listPresse.getSelectedIndices().length == 1) {

                PUrehabiliter puRehab = new PUrehabiliter();
                puRehab.setVisible(true);
                puRehab.abonner(new EcouteurWindows());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez selectionner une presse ");
        }
    }//GEN-LAST:event_butRehabiliterActionPerformed
    class EcouteurWindows extends WindowAdapter {

        @Override
        public void windowClosed(WindowEvent e) {
            System.out.println("test");
            ListPresseModel model = (ListPresseModel) listPresse.getModel();
            model.refreshmodel();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butActualiser;
    private javax.swing.JButton butAjouter;
    private javax.swing.JButton butRehabiliter;
    private javax.swing.JButton butSupprimer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labMachine;
    public static javax.swing.JList listPresse;
    // End of variables declaration//GEN-END:variables
}
